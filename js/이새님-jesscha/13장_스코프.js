변수는 코드의 가장 바깥 영역뿐 아니라 코드 블록이나 함수 몸체 내에서도 선언할 수 있다. 이때 코드 블록이나 함수는 중첩될 수 있다. 

```jsx
var var1 = 1; // 코드의 가장 바깥 영역에서 선언한 변수
if (true) { var var2 = 2; // 코드 블록 내에서 선언한 변수 if (true) { var var3 = 3; // 중첩된 코드 블록 내에서 선언한 변수 } }
function foo() { var var4 = 4; // 함수 내에서 선언한 변수
function bar() { var var5 = 5; // 중첩된 함수 내에서 선언한 변수 } }
console.log(var1); // 1
console.log(var2); // 2
console.log(var3); // 3
console.log(var4); // var4 is not defined
console.log(var5); // var5 is not defined

```

모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다. 이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위를 말한다. 

```jsx
var x = 'global';

function foo() {
	var x = 'local';
	console.log(x); //1
}

foo();

console.log(x); //2
```

이때 자바스크립트 엔진은 이름이 같은 두개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정해야 한다. 이를 식별자 결정 이라 한다. 자바스크립트 엔진은 스코프를 통해 어떤 변수를 참조해야 할 것인지 결정한다. 스코프란 자바 스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다. 

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cb404ad9-82ac-4857-9c16-a87c95f3b70b/09BEE859-1E0A-4B35-B14D-622BE3AE1DC1_4_5005_c.jpeg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cb404ad9-82ac-4857-9c16-a87c95f3b70b/09BEE859-1E0A-4B35-B14D-622BE3AE1DC1_4_5005_c.jpeg)

식별자는 어떤 값을 구별할 수 있어야 하므로 유일해야 한다. 따라서 식별자인 변수 이름은 중복될 수 없다. 즉, 하나의 값은 유일한 식별자에 연결 되어야 한다. 

우리는 컴퓨터를 사용할 때 하나의 파일 이름만을 사용하지는 않는다. 폴더라는 개념이 있기 때문이다. 스코프는 폴더처럼 변수 이름의 충돌을 방지한다. 스코프 내에서 식별자는 유일해야 하지만 다른 스코프에는 같은 이름의 식별자를 사용할 수 있다. 즉, 스코프는 네임스페이스다. 

### 13.2 스코프의 종류

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ea63abf6-07d0-4ebf-8f38-93f0656dd447/F4048346-9E3E-4D0D-96F3-017B6377ED3E.jpeg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ea63abf6-07d0-4ebf-8f38-93f0656dd447/F4048346-9E3E-4D0D-96F3-017B6377ED3E.jpeg)

전역에 변수를 선언하면 전역 스코프를 갖는 전역 변수가 된다. 전역 변수는 어디서든지 참조할 수 있다. 

### 13.2.2 지역과 지역 스코프

지역이란 함수 몸체 내부를 말한다. 지역변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효하다. 

inner 함수 내부에서 선언된 x 변수 이외에 이름이 같은 전역 변수 x가 존재한다. 이때 inner함수 내부에서 x 변수를 참조하면 전역 변수 x를 참조하는 것이 아니라 inner 함수 내부에서 선언된 x 변수를 참조한다. 이는 자바스크립트 엔진이 스코프 체인을 통해 참조할 변수를 검색 했기 때문이다. 

## 13.3 스코프 체인

함수 몸체 내부에서 함수가 정의 되는 것을 함수의 중첩이라 한다. 함수 몸체 내부에서 정의한 함수를 '중첩 함수' 중첩 함수를 포함하는 함수를 '외부 함수' 라고 한다. 

스코프는 함수의중첩에 의해 계층적인 구조를 갖는다. 이때 외부 함수의 지역 스코프를 중첩 함수의 상위 스코프라 한다. 

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/43cb7be9-6527-45d5-9e39-280e92829a21/91E551E6-4B0C-488E-A9DF-782A0F639E3D.jpeg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/43cb7be9-6527-45d5-9e39-280e92829a21/91E551E6-4B0C-488E-A9DF-782A0F639E3D.jpeg)

이처럼 모든 스코프는 하나의 계층적 구조로 연결되며 모든 지역의 스코프의 최상위 스코프는 전역 스코프다. 이렇게 스코프가 계층적으로 연결된 것을 스코프 체인 이라 한다. 

변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색 한다. 이를 통해 상위 스코프에서 선언한 변수를 하위 스코프에서도 참조할 수 있다. 

스코프 체인은 물리적인 실체로 존재한다. 자바스크립트 엔진은 코드를 실행하기에 앞서 위 그림과 유사한 자료구조인 렉시컬 환경을 실제로 생성한다. 변수 선언이 실행되면 변수 식별자가 이 자료구조에 키로 등록되고 변수 할당이 일어나면 이 자료구조의 변수 식별자에 해당하는 값을 변경한다. 변수의 검색도 이 자료구조 상에서 이뤄진다. 

### 13.3.1 스코프 체인에 의한 변수 검색

상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다. 

스코프체인으로 연결된 스코프의 계층적인 구조는 부자 관계로 이루어진 상속과 유사하다. 상속을 통해 부모의 자산을 자식이 자유롭게 사용할 수 있지만 자식의 자산을 부모가 사용할 수는 없다. 스코프 체인도 마찬가지 개념이다. 

### 13.3.2 스코프 체인에 의한 함수 검색

다음 예제를 살펴보자. 전역에서 정의된 foo 함수와 bar 함수 내부에서 정의된 foo 함수가 있다. 

```jsx
function foo() { console.log('global function foo');
}
function bar() {
// 중첩 함수
	function foo() { 
		console.log('local function foo()');
	}

	foo();

}
bar();
```

사실 함수는 식별자에 함수 객체가 할당된 것 외에는 일반 변수와 다를 바 없다. 스코프를 "변수를 사용할때 사용하는 규칙"이라고 표현하기 보다는 "식별자를 검색하는 규칙" 이라고 하는 편이 좀 더 정확하다. 

## 13.4 함수 레벨 스코프

지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다고 했다. 이는 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미다. 

C나 자바 등을 비롯한 대부분의 프로그래밍 언어는 함수 몸체만이 아니라 모든 코드 블록이 지역 스코프를 만든다. 이러한 특성을 블록 레벨 스코프라 한다. 하지만 var 키워드로 선언된 변수는 오로지 함수의 코드블록 만을 지역 스코프로 인정한다. 이러한 특성을 함수 레벨 스코프라 한다. 

```jsx
var x = 1;
if (true) {
// var 키워드로 선언된 변수는 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다.
// 함수 밖에서 var 키워드로 선언된 변수는 코드 블록 내에서 선언되었다 할지라도 모두 전역 변수다.
// 따라서 x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.
// 이는 의도치 않게 변수 값이 변경되는 부작용을 발생시킨다.
var x = 10;
}
console.log(x); // 10
```

var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하지만 ES6에서 도입된 let, const 키워드는 블록 레벨 스코프를 지원한다. 

## 13.5 렉시컬 스코프

```jsx
var x = 1;
function foo() { var x = 10;
bar();
}
function bar() { console.log(x);
}
foo();
bar();
```

위 예제의 실행 결과는 bar 함수의 상위 스코프가 무엇인지에 따라 결정된다. 

1. 함수를 어디서 호출했는지에 따라 함수의 상위 스코프를 결정한다.  ⇒ 동적 스코프
2. 함수를 어디서 정의했는지에 따라 함수의 상위 스코프를 결정한다.  ⇒ 렉시컬 스코프, 정적 스코프

자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다. 즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프다. 

함수 정의가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다. 함수가 호출될 때마다 함수의 상위 스코프를 참조할 필요가 있기 때문이다. 

위에서는 결국 전역 변수의 값 1이 두번 출력된다.
